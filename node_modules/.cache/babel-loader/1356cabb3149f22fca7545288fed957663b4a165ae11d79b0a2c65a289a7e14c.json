{"ast":null,"code":"var _jsxFileName = \"/home/amliebeq/Developement/code/phaseTwoProject/src/components/Dictionary.js\";\nimport React from 'react';\nimport Card from './Card';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Dictionary(_ref) {\n  let {\n    sayingObjs\n  } = _ref;\n  const makeList = sayingObjs.map(saying => {\n    return /*#__PURE__*/_jsxDEV(Card, {\n      jargon: saying.jargon,\n      definition: saying.definition,\n      sentence: saying.sentence,\n      image: saying.image,\n      id: saying.id\n    }, saying.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 7,\n      columnNumber: 13\n    }, this);\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"items\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Master corporate jargon dictionary\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"item list\",\n      className: \"row\",\n      children: makeList\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 12,\n    columnNumber: 9\n  }, this);\n}\n_c = Dictionary;\nexport default Dictionary;\nvar _c;\n$RefreshReg$(_c, \"Dictionary\");","map":{"version":3,"names":["React","Card","jsxDEV","_jsxDEV","Dictionary","_ref","sayingObjs","makeList","map","saying","jargon","definition","sentence","image","id","fileName","_jsxFileName","lineNumber","columnNumber","children","className","_c","$RefreshReg$"],"sources":["/home/amliebeq/Developement/code/phaseTwoProject/src/components/Dictionary.js"],"sourcesContent":["import React from 'react'\nimport Card from './Card'\n\nfunction Dictionary({ sayingObjs }) {\n    const makeList= sayingObjs.map((saying) => {\n        return(\n            <Card key={saying.id} jargon={saying.jargon} definition={saying.definition} sentence={saying.sentence} image={saying.image} id={saying.id}/>\n        )\n    })\n\n    return (\n        <div id='items'>\n            <h1>Master corporate jargon dictionary</h1>\n            <div id='item list' className='row'>\n                {makeList}\n            </div>\n        </div>\n    )\n}\n\nexport default Dictionary"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,IAAI,MAAM,QAAQ;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAEzB,SAASC,UAAUA,CAAAC,IAAA,EAAiB;EAAA,IAAhB;IAAEC;EAAW,CAAC,GAAAD,IAAA;EAC9B,MAAME,QAAQ,GAAED,UAAU,CAACE,GAAG,CAAEC,MAAM,IAAK;IACvC,oBACIN,OAAA,CAACF,IAAI;MAAiBS,MAAM,EAAED,MAAM,CAACC,MAAO;MAACC,UAAU,EAAEF,MAAM,CAACE,UAAW;MAACC,QAAQ,EAAEH,MAAM,CAACG,QAAS;MAACC,KAAK,EAAEJ,MAAM,CAACI,KAAM;MAACC,EAAE,EAAEL,MAAM,CAACK;IAAG,GAA/HL,MAAM,CAACK,EAAE;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAAwH;EAEpJ,CAAC,CAAC;EAEF,oBACIf,OAAA;IAAKW,EAAE,EAAC,OAAO;IAAAK,QAAA,gBACXhB,OAAA;MAAAgB,QAAA,EAAI;IAAkC;MAAAJ,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAAK,eAC3Cf,OAAA;MAAKW,EAAE,EAAC,WAAW;MAACM,SAAS,EAAC,KAAK;MAAAD,QAAA,EAC9BZ;IAAQ;MAAAQ,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QACP;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,QACJ;AAEd;AAACG,EAAA,GAfQjB,UAAU;AAiBnB,eAAeA,UAAU;AAAA,IAAAiB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}